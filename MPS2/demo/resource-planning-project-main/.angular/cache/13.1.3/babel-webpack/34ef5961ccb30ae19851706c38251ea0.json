{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { startOfDay, endOfDay, subDays, addDays, endOfMonth, isSameDay, isSameMonth, addHours } from 'date-fns';\nimport { Subject } from 'rxjs';\nimport { CalendarView } from 'angular-calendar';\nconst colors = {\n  red: {\n    primary: '#ad2121',\n    secondary: '#FAE3E3'\n  },\n  blue: {\n    primary: '#1e90ff',\n    secondary: '#D1E8FF'\n  },\n  yellow: {\n    primary: '#e3bc08',\n    secondary: '#FDF1BA'\n  }\n};\nlet CalendarComponent = class CalendarComponent {\n  constructor(modal) {\n    this.modal = modal;\n    this.view = CalendarView.Month;\n    this.CalendarView = CalendarView;\n    this.viewDate = new Date();\n    this.actions = [{\n      label: '<i class=\"fas fa-fw fa-pencil-alt\"></i>',\n      a11yLabel: 'Edit',\n      onClick: ({\n        event\n      }) => {\n        this.handleEvent('Edited', event);\n      }\n    }, {\n      label: '<i class=\"fas fa-fw fa-trash-alt\"></i>',\n      a11yLabel: 'Delete',\n      onClick: ({\n        event\n      }) => {\n        this.events = this.events.filter(iEvent => iEvent !== event);\n        this.handleEvent('Deleted', event);\n      }\n    }];\n    this.refresh = new Subject();\n    this.events = [{\n      start: subDays(startOfDay(new Date()), 1),\n      end: addDays(new Date(), 1),\n      title: 'A 3 day event',\n      color: colors.red,\n      actions: this.actions,\n      allDay: true,\n      resizable: {\n        beforeStart: true,\n        afterEnd: true\n      },\n      draggable: true\n    }, {\n      start: startOfDay(new Date()),\n      title: 'An event with no end date',\n      color: colors.yellow,\n      actions: this.actions\n    }, {\n      start: subDays(endOfMonth(new Date()), 3),\n      end: addDays(endOfMonth(new Date()), 3),\n      title: 'A long event that spans 2 months',\n      color: colors.blue,\n      allDay: true\n    }, {\n      start: addHours(startOfDay(new Date()), 2),\n      end: addHours(new Date(), 2),\n      title: 'A draggable and resizable event',\n      color: colors.yellow,\n      actions: this.actions,\n      resizable: {\n        beforeStart: true,\n        afterEnd: true\n      },\n      draggable: true\n    }];\n    this.activeDayIsOpen = true;\n  }\n\n  dayClicked({\n    date,\n    events\n  }) {\n    if (isSameMonth(date, this.viewDate)) {\n      if (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true || events.length === 0) {\n        this.activeDayIsOpen = false;\n      } else {\n        this.activeDayIsOpen = true;\n      }\n\n      this.viewDate = date;\n    }\n  }\n\n  eventTimesChanged({\n    event,\n    newStart,\n    newEnd\n  }) {\n    this.events = this.events.map(iEvent => {\n      if (iEvent === event) {\n        return Object.assign(Object.assign({}, event), {\n          start: newStart,\n          end: newEnd\n        });\n      }\n\n      return iEvent;\n    });\n    this.handleEvent('Dropped or resized', event);\n  }\n\n  handleEvent(action, event) {\n    this.modalData = {\n      event,\n      action\n    };\n    this.modal.open(this.modalContent, {\n      size: 'lg'\n    });\n  }\n\n  addEvent() {\n    this.events = [...this.events, {\n      title: 'New event',\n      start: startOfDay(new Date()),\n      end: endOfDay(new Date()),\n      color: colors.red,\n      draggable: true,\n      resizable: {\n        beforeStart: true,\n        afterEnd: true\n      }\n    }];\n  }\n\n  deleteEvent(eventToDelete) {\n    this.events = this.events.filter(event => event !== eventToDelete);\n  }\n\n  setView(view) {\n    this.view = view;\n  }\n\n  closeOpenMonthViewDay() {\n    this.activeDayIsOpen = false;\n  }\n\n};\n\n__decorate([ViewChild('modalContent', {\n  static: true\n})], CalendarComponent.prototype, \"modalContent\", void 0);\n\nCalendarComponent = __decorate([Component({\n  selector: 'app-calendar',\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.scss']\n})], CalendarComponent);\nexport { CalendarComponent };","map":null,"metadata":{},"sourceType":"module"}