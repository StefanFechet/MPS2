{"ast":null,"code":"import { config, icon, parse, text, counter } from '@fortawesome/fontawesome-svg-core';\nimport { Injectable, Input, Inject, Optional, forwardRef, HostBinding, Component, ElementRef, Renderer2, NgModule, defineInjectable } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Returns if is IconLookup or not.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/platform-browser';\nconst _c0 = [[[\"fa-icon\"], [\"fa-layers-text\"], [\"fa-layers-counter\"]]];\nconst _c1 = [\"fa-icon, fa-layers-text, fa-layers-counter\"];\n\nconst isIconLookup = i => {\n  return (\n    /** @type {?} */\n    i.prefix !== undefined &&\n    /** @type {?} */\n    i.iconName !== undefined\n  );\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Normalizing icon spec.\n  @type {?} */\n\n\nconst faNormalizeIconSpec = (iconSpec, defaultPrefix = 'fas') => {\n  if (typeof iconSpec === 'undefined' || iconSpec === null) {\n    return null;\n  }\n\n  if (isIconLookup(iconSpec)) {\n    return iconSpec;\n  }\n\n  if (Array.isArray(iconSpec) &&\n  /** @type {?} */\n  iconSpec.length === 2) {\n    return {\n      prefix: iconSpec[0],\n      iconName: iconSpec[1]\n    };\n  }\n\n  if (typeof iconSpec === 'string') {\n    return {\n      prefix: defaultPrefix,\n      iconName: iconSpec\n    };\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst objectWithKey = (key, value) => {\n  return Array.isArray(value) && value.length > 0 || !Array.isArray(value) && value ? {\n    [key]: value\n  } : {};\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Fontawesome class list.\n * Returns classes array by props.\n  @type {?} */\n\n\nconst faClassList = props => {\n  /** @type {?} */\n  const classes = {\n    'fa-spin': props.spin,\n    'fa-pulse': props.pulse,\n    'fa-fw': props.fixedWidth,\n    'fa-border': props.border,\n    'fa-li': props.listItem,\n    'fa-inverse': props.inverse,\n    'fa-layers-counter': props.counter,\n    'fa-flip-horizontal': props.flip === 'horizontal' || props.flip === 'both',\n    'fa-flip-vertical': props.flip === 'vertical' || props.flip === 'both',\n    [`fa-${props.size}`]: props.size !== null,\n    [`fa-rotate-${props.rotate}`]: props.rotate !== null,\n    [`fa-pull-${props.pull}`]: props.pull !== null\n  };\n  return Object.keys(classes).map(key => classes[key] ? key : null).filter(key => key);\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst faWarnIfIconHtmlMissing = (iconObj, iconSpec) => {\n  if (iconSpec && !iconObj) {\n    console.error(`FontAwesome: Could not find icon with iconName=${iconSpec.iconName} and prefix=${iconSpec.prefix}`);\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst faWarnIfIconSpecMissing = iconSpec => {\n  if (!iconSpec) {\n    console.error('FontAwesome: Could not find icon. ' + `It looks like you've provided a null or undefined icon object to this component.`);\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst faNotFoundIconHtml = `<svg class=\"${config.replacementClass}\" viewBox=\"0 0 448 512\"></svg><!--icon not found-->`;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nclass FaIconService {\n  constructor() {\n    this.defaultPrefix = 'fas';\n  }\n\n}\n\nFaIconService.ɵfac = function FaIconService_Factory(t) {\n  return new (t || FaIconService)();\n};\n\nFaIconService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: FaIconService,\n  factory: FaIconService.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nFaIconService.ngInjectableDef = defineInjectable({\n  factory: function FaIconService_Factory() {\n    return new FaIconService();\n  },\n  token: FaIconService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Fontawesome icon.\n */\n\n\nlet FaIconComponent = /*#__PURE__*/(() => {\n  class FaIconComponent {\n    /**\n     * @param {?} sanitizer\n     * @param {?} iconService\n     */\n    constructor(sanitizer, iconService) {\n      this.sanitizer = sanitizer;\n      this.iconService = iconService;\n      this.classes = [];\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      if (changes) {\n        this.updateIconSpec();\n        this.updateParams();\n        this.updateIcon();\n        this.renderIcon();\n      }\n    }\n    /**\n     * Updating icon spec.\n     * @return {?}\n     */\n\n\n    updateIconSpec() {\n      this.iconSpec = faNormalizeIconSpec(this.iconProp, this.iconService.defaultPrefix);\n    }\n    /**\n     * Updating params by component props.\n     * @return {?}\n     */\n\n\n    updateParams() {\n      /** @type {?} */\n      const classOpts = {\n        flip: this.flip,\n        spin: this.spin,\n        pulse: this.pulse,\n        border: this.border,\n        inverse: this.inverse,\n        listItem: this.listItem,\n        size: this.size || null,\n        pull: this.pull || null,\n        rotate: this.rotate || null,\n        fixedWidth: this.fixedWidth\n      };\n      /** @type {?} */\n\n      const classes = objectWithKey('classes', [...faClassList(classOpts), ...this.classes]);\n      /** @type {?} */\n\n      const mask = objectWithKey('mask', faNormalizeIconSpec(this.mask, this.iconService.defaultPrefix));\n      /** @type {?} */\n\n      const parsedTransform = typeof this.transform === 'string' ? parse.transform(this.transform) : this.transform;\n      /** @type {?} */\n\n      const transform = objectWithKey('transform', parsedTransform);\n      this.params = Object.assign({\n        title: this.title\n      }, transform, classes, mask, {\n        styles: this.styles,\n        symbol: this.symbol\n      });\n    }\n    /**\n     * Updating icon by params and icon spec.\n     * @return {?}\n     */\n\n\n    updateIcon() {\n      this.icon = icon(this.iconSpec, this.params);\n    }\n    /**\n     * Rendering icon.\n     * @return {?}\n     */\n\n\n    renderIcon() {\n      faWarnIfIconSpecMissing(this.iconSpec);\n      faWarnIfIconHtmlMissing(this.icon, this.iconSpec);\n      this.renderedIconHTML = this.sanitizer.bypassSecurityTrustHtml(this.icon ? this.icon.html.join('\\n') : faNotFoundIconHtml);\n    }\n\n  }\n\n  FaIconComponent.ɵfac = function FaIconComponent_Factory(t) {\n    return new (t || FaIconComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(FaIconService));\n  };\n\n  FaIconComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: FaIconComponent,\n    selectors: [[\"fa-icon\"]],\n    hostAttrs: [1, \"ng-fa-icon\"],\n    hostVars: 1,\n    hostBindings: function FaIconComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"innerHTML\", ctx.renderedIconHTML, ɵngcc0.ɵɵsanitizeHtml);\n      }\n    },\n    inputs: {\n      classes: \"classes\",\n      iconProp: [\"icon\", \"iconProp\"],\n      title: \"title\",\n      spin: \"spin\",\n      pulse: \"pulse\",\n      mask: \"mask\",\n      styles: \"styles\",\n      flip: \"flip\",\n      size: \"size\",\n      pull: \"pull\",\n      border: \"border\",\n      inverse: \"inverse\",\n      symbol: \"symbol\",\n      listItem: \"listItem\",\n      rotate: \"rotate\",\n      fixedWidth: \"fixedWidth\",\n      transform: \"transform\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function FaIconComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return FaIconComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Fontawesome layers.\n */\n\n\nlet FaLayersComponent = /*#__PURE__*/(() => {\n  class FaLayersComponent {\n    /**\n     * @param {?} renderer\n     * @param {?} elementRef\n     */\n    constructor(renderer, elementRef) {\n      this.renderer = renderer;\n      this.elementRef = elementRef;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this.renderer.addClass(this.elementRef.nativeElement, 'fa-layers');\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      if ('size' in changes) {\n        if (changes[\"size\"].currentValue != null) {\n          this.renderer.addClass(this.elementRef.nativeElement, `fa-${changes[\"size\"].currentValue}`);\n        }\n\n        if (changes[\"size\"].previousValue != null) {\n          this.renderer.removeClass(this.elementRef.nativeElement, `fa-${changes[\"size\"].previousValue}`);\n        }\n      }\n    }\n\n  }\n\n  FaLayersComponent.ɵfac = function FaLayersComponent_Factory(t) {\n    return new (t || FaLayersComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  FaLayersComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: FaLayersComponent,\n    selectors: [[\"fa-layers\"]],\n    hostVars: 2,\n    hostBindings: function FaLayersComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"fa-fw\", ctx.fixedWidth);\n      }\n    },\n    inputs: {\n      size: \"size\",\n      fixedWidth: \"fixedWidth\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function FaLayersComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return FaLayersComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Warns if parent component not existing.\n  @type {?} */\n\n\nconst faWarnIfParentNotExist = (parent, parentName, childName) => {\n  if (!parent) {\n    console.error(`FontAwesome: ${childName} should be used as child of ${parentName} only.`);\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n */\n\n\nlet FaLayersTextBaseComponent = /*#__PURE__*/(() => {\n  class FaLayersTextBaseComponent {\n    /**\n     * @param {?} parent\n     * @param {?} sanitizer\n     */\n    constructor(parent, sanitizer) {\n      this.parent = parent;\n      this.sanitizer = sanitizer;\n      this.classes = [];\n      faWarnIfParentNotExist(this.parent, 'FaLayersComponent', this.constructor.name);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      if (changes) {\n        this.updateParams();\n        this.updateContent();\n      }\n    }\n    /**\n     * Updating content by params and content.\n     * @return {?}\n     */\n\n\n    updateContent() {\n      this.renderedHTML = this.sanitizer.bypassSecurityTrustHtml(this.renderFontawesomeObject(this.content || '', this.params).html.join('\\n'));\n    }\n\n  }\n\n  FaLayersTextBaseComponent.ɵfac = function FaLayersTextBaseComponent_Factory(t) {\n    return new (t || FaLayersTextBaseComponent)(ɵngcc0.ɵɵinject(forwardRef(() => FaLayersComponent), 8), ɵngcc0.ɵɵinject(ɵngcc1.DomSanitizer));\n  };\n\n  FaLayersTextBaseComponent.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: FaLayersTextBaseComponent,\n    factory: FaLayersTextBaseComponent.ɵfac\n  });\n  FaLayersTextBaseComponent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: FaLayersTextBaseComponent,\n    hostVars: 1,\n    hostBindings: function FaLayersTextBaseComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"innerHTML\", ctx.renderedHTML, ɵngcc0.ɵɵsanitizeHtml);\n      }\n    },\n    inputs: {\n      classes: \"classes\",\n      content: \"content\",\n      title: \"title\",\n      styles: \"styles\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  /** @nocollapse */\n\n  return FaLayersTextBaseComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Fontawesome layers text.\n */\n\n\nlet FaLayersTextComponent = /*#__PURE__*/(() => {\n  class FaLayersTextComponent extends FaLayersTextBaseComponent {\n    /**\n     * Updating params by component props.\n     * @return {?}\n     */\n    updateParams() {\n      /** @type {?} */\n      const classOpts = {\n        flip: this.flip,\n        spin: this.spin,\n        pulse: this.pulse,\n        border: this.border,\n        inverse: this.inverse,\n        listItem: this.listItem,\n        size: this.size || null,\n        pull: this.pull || null,\n        rotate: this.rotate || null,\n        fixedWidth: this.fixedWidth\n      };\n      /** @type {?} */\n\n      const classes = objectWithKey('classes', [...faClassList(classOpts), ...this.classes]);\n      /** @type {?} */\n\n      const parsedTransform = typeof this.transform === 'string' ? parse.transform(this.transform) : this.transform;\n      /** @type {?} */\n\n      const transform = objectWithKey('transform', parsedTransform);\n      this.params = Object.assign({}, transform, classes, {\n        title: this.title,\n        styles: this.styles\n      });\n    }\n    /**\n     * @param {?} content\n     * @param {?=} params\n     * @return {?}\n     */\n\n\n    renderFontawesomeObject(content, params) {\n      return text(content, params);\n    }\n\n  }\n\n  FaLayersTextComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵFaLayersTextComponent_BaseFactory;\n    return function FaLayersTextComponent_Factory(t) {\n      return (ɵFaLayersTextComponent_BaseFactory || (ɵFaLayersTextComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FaLayersTextComponent)))(t || FaLayersTextComponent);\n    };\n  }();\n\n  FaLayersTextComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: FaLayersTextComponent,\n    selectors: [[\"fa-layers-text\"]],\n    hostAttrs: [1, \"ng-fa-layers-text\"],\n    inputs: {\n      spin: \"spin\",\n      pulse: \"pulse\",\n      flip: \"flip\",\n      size: \"size\",\n      pull: \"pull\",\n      border: \"border\",\n      inverse: \"inverse\",\n      listItem: \"listItem\",\n      rotate: \"rotate\",\n      fixedWidth: \"fixedWidth\",\n      transform: \"transform\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function FaLayersTextComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return FaLayersTextComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Fontawesome layers counter.\n */\n\n\nlet FaLayersCounterComponent = /*#__PURE__*/(() => {\n  class FaLayersCounterComponent extends FaLayersTextBaseComponent {\n    /**\n     * Updating params by component props.\n     * @return {?}\n     */\n    updateParams() {\n      this.params = {\n        title: this.title,\n        classes: this.classes,\n        styles: this.styles\n      };\n    }\n    /**\n     * @param {?} content\n     * @param {?=} params\n     * @return {?}\n     */\n\n\n    renderFontawesomeObject(content, params) {\n      return counter(content, params);\n    }\n\n  }\n\n  FaLayersCounterComponent.ɵfac = /*@__PURE__*/function () {\n    let ɵFaLayersCounterComponent_BaseFactory;\n    return function FaLayersCounterComponent_Factory(t) {\n      return (ɵFaLayersCounterComponent_BaseFactory || (ɵFaLayersCounterComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FaLayersCounterComponent)))(t || FaLayersCounterComponent);\n    };\n  }();\n\n  FaLayersCounterComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: FaLayersCounterComponent,\n    selectors: [[\"fa-layers-counter\"]],\n    hostAttrs: [1, \"ng-fa-layers-counter\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function FaLayersCounterComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return FaLayersCounterComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nlet FontAwesomeModule = /*#__PURE__*/(() => {\n  class FontAwesomeModule {}\n\n  FontAwesomeModule.ɵfac = function FontAwesomeModule_Factory(t) {\n    return new (t || FontAwesomeModule)();\n  };\n\n  FontAwesomeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: FontAwesomeModule\n  });\n  FontAwesomeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return FontAwesomeModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FontAwesomeModule, {\n    declarations: function () {\n      return [FaIconComponent, FaLayersComponent, FaLayersTextComponent, FaLayersCounterComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [FaIconComponent, FaLayersComponent, FaLayersTextComponent, FaLayersCounterComponent];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { FontAwesomeModule, FaIconComponent, FaIconService, FaLayersComponent, FaLayersTextComponent, FaLayersCounterComponent, FaLayersTextBaseComponent as ɵa }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module"}